local config = require "main.config"


go.property("speed", 600)
go.property("angle",0)
go.property("player_id",0)
go.property("direction", vmath.vector3())

local STATE_FLYING = 1
local STATE_PICKABLE = 2
local STATE_DEAD = 3
local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")

local function angle_to_vector(angle, magnitude)
	local v = vmath.vector3(magnitude*math.cos(angle),magnitude*math.sin(angle),0)
	return v
end

local function vector_to_angle(v)
	local angle = math.atan2(v.y, v.x)
    if angle < 0 then angle = angle + math.pi * 2 end
    return angle;
end

local function change_state(self, new_state)
	if self.state == new_state then return end
	self.state = new_state
	if self.state == STATE_FLYING then
		-- 
	elseif self.state == STATE_PICKABLE then 
		self.speed = 0
		particlefx.stop("#fx")
	elseif self.state == STATE_DEAD then 
		self.speed = 0
		particlefx.stop("#fx")
		msg.post("#collisionobject","disable")
	end
end

function init(self)
	self.dt = 0
    change_state(self, STATE_FLYING)
    self.direction =  angle_to_vector(self.angle , self.speed)
    particlefx.play("#fx")
end

function update(self, dt)
	self.dt = self.dt + dt
	if self.state == STATE_FLYING then
		self.angle = vector_to_angle(self.direction)
		go.set_rotation(vmath.quat_rotation_z(self.angle))
		
		self.direction.y = self.direction.y - config.ARROW_GRAVITY * dt 
		if self.direction.y > config.ARROW_MAX_FALL_SPEED then self.direction.y = config.ARROW_MAX_FALL_SPEED end
		local pos = go.get_position()
		pos.x = pos.x + self.direction.x * dt
		pos.y = pos.y + self.direction.y * dt
		go.set_position(pos)
	else
		--particlefx.stop("#fx")
	end
end


function on_message(self, message_id, message, sender)
    if message_id == msg_contact_point_response then
    	
    	-- Collision with level
    	if message.group == hash("level") then
    		-- to bounce arrows off walls
    		--[[
    		local pos = go.get_position()
    		if message.normal.x ~= 0 then 
    			self.direction.x = -self.direction.x 
    			pos.x = pos.x + message.normal.x * message.distance
    		end
    		if message.normal.y ~= 0 then 
    			self.direction.y = -self.direction.y 
    			pos.y = pos.y + message.normal.y * message.distance
    		end
    			--]]
    		change_state(self, STATE_PICKABLE)
    		
    	-- Collision with player
    	elseif message.group == hash("player") then
    		local other_url = msg.url(message.other_id)
    		other_url.fragment = "player"
    		if self.state == STATE_FLYING then			
    			local player_id = go.get(other_url, "player_id")
    			if player_id ~= self.player_id then
    				-- collided with enemy
    				change_state(self,STATE_DEAD)
    				local pos = go.get_position()
					pos.x = pos.x + self.direction.x * 0.02
					pos.y = pos.y + self.direction.y * 0.02
					go.set_position(pos)
			    	msg.post(".","set_parent",{parent_id = other_url.path})
    				msg.post(other_url,"hit_by_arrow")
    			end
    		elseif self.state == STATE_PICKABLE then
    			-- player collects it
    			go.delete()
    			msg.post(other_url,"collect_arrow")
    		end
    	end
    elseif message_id == hash("hit_player") then
    	
    end
end

