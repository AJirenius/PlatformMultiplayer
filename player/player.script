local config = require "main.config"
local player_state = require "player.player_state"

-- pre-hashing ids improves performance
local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")
local group_level = hash("level")
local input_left = hash("left")
local input_right = hash("right")
local input_jump = hash("jump")

local anim_run = hash("run")
local anim_wall_glide = hash("wall_glide")
local anim_idle = hash("idle")
local anim_jump = hash("jump")
local anim_fall = hash("fall")

function init(self)
    msg.post(".", "acquire_input_focus")
    -- initial player velocity
    self.velocity = vmath.vector3(0, 0, 0)
    -- support variable to keep track of collisions and separation
    self.correction = vmath.vector3()
    -- if the player stands on ground or not
    self.ground_contact = false
    self.wall_contact = 0
    -- movement input in the range [-1,1]
    self.move_input = 0
    -- the currently playing animation
    self.anim = nil
    
    self.flipped_sprite = false
end

local function play_animation(self, anim)
    if self.anim ~= anim then
        msg.post("#sprite", "play_animation", {id = anim})
        self.anim = anim
    end
end

local function update_animations(self)
   
    if self.ground_contact then
        if self.velocity.x == 0 then
            play_animation(self, anim_idle)
        else
            play_animation(self, anim_run)
        end
    else
        if self.velocity.y > 0 then
            play_animation(self, anim_jump)
        else
            play_animation(self, anim_fall)
        end
    end
end

local function update_movement(self,dt)
	-- determine the target speed based on input
    local target_speed = self.move_input * config.PLAYER_MAX_SPEED -- -1 or 1
    -- calculate the difference between our current speed and the target speed
    local speed_diff = target_speed - self.velocity.x
    -- the complete acceleration to integrate over this frame
    local acceleration = vmath.vector3(0, -config.GRAVITY, 0)
    if speed_diff ~= 0 then -- if speed_diff is 0 then no changes should be done, right?
        -- set the acceleration to work in the direction of the difference
        if speed_diff < 0 then
            acceleration.x = -config.PLAYER_ACCELERATION
        else
            acceleration.x = config.PLAYER_ACCELERATION
        end
        -- decrease the acceleration when air-borne to give a slower feel
        if not self.ground_contact then
            acceleration.x = config.AIR_FRICTION * acceleration.x
        end
    end
    -- calculate the velocity change this frame (dv is short for delta-velocity)
    local dv = acceleration * dt
    -- check if dv exceeds the intended speed difference, clamp it in that case
    if math.abs(dv.x) > math.abs(speed_diff) then
        dv.x = speed_diff
    end
    -- save the current velocity for later use
    -- (self.velocity, which right now is the velocity used the previous frame)
    local v0 = self.velocity
    -- calculate the new velocity by adding the velocity change
    self.velocity = self.velocity + dv
    
    -- reduce y-speed 
    if self.wall_contact ~= 0 and self.velocity.y < 0 then
    	self.velocity.y = self.velocity.y * config.PLAYER_WALL_FRICTION
    end
    
    -- calculate the translation this frame by integrating the velocity
    local dp = (v0 + self.velocity) * dt * 0.5
    -- apply it to the player character
    go.set_position(go.get_position() + dp)
end

local function flip_horizontal(self,flipped)
	if flipped ~= nil then
		self.flipped_sprite = flipped
	else 
		self.flipped_sprite = not self.flipped_sprite
	end
	sprite.set_hflip("#sprite", self.flipped_sprite)
end

function update(self, dt)
    
	update_movement(self, dt)
    update_animations(self)
    
    -- reset 
    self.correction = vmath.vector3()
    self.move_input = 0
    self.ground_contact = false
    self.wall_contact = 0
end

local function handle_obstacle_contact(self, normal, distance)
    -- project the correction vector onto the contact normal
    -- (the correction vector is the 0-vector for the first contact point)
    local proj = vmath.dot(self.correction, normal)
    -- calculate the compensation we need to make for this contact point
    local comp = (distance - proj) * normal
    -- add it to the correction vector
    self.correction = self.correction + comp
    -- apply the compensation to the player character
    go.set_position(go.get_position() + comp)
    -- check if the normal points enough up to consider the player standing on the ground
    -- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
   
    if normal.y > 0.7 then
        self.ground_contact = true
        self.wall_contact = 0
    end
    if normal.y == 0 and math.abs(normal.x) == 1 and self.ground_contact == false then
    	self.wall_contact = normal.x
    	play_animation(self,anim_wall_glide)
    end
        
    -- project the velocity onto the normal
    proj = vmath.dot(self.velocity, normal)
    -- if the projection is negative, it means that some of the velocity points towards the contact point
    if proj < 0 then
        -- remove that component in that case
        self.velocity = self.velocity - proj * normal
    end
end

function on_message(self, message_id, message, sender)
    if message_id == msg_contact_point_response then
        if message.group == group_level then
            handle_obstacle_contact(self, message.normal, message.distance)
        end
    end
end

local function jump(self)
    if self.ground_contact then
        self.velocity.y = config.JUMP_ACCELERATION
        play_animation(self, anim_jump)
    end
end

local function abort_jump(self)
    if self.velocity.y > 0 then
        self.velocity.y = self.velocity.y * 0.5
    end
end

local function wall_jump(self)
	self.velocity.y = config.WALL_JUMP_ACCELERATION
	self.velocity.x = config.WALL_JUMP_ACCELERATION * self.wall_contact
end

function on_input(self, action_id, action)
    if action_id == input_left then
        self.move_input = -action.value
        flip_horizontal(self,true)
    elseif action_id == input_right then
        self.move_input = action.value
        flip_horizontal(self,false)
    elseif action_id == input_jump then
        if action.pressed then
            jump(self)
            if self.wall_contact ~= 0 then
            	wall_jump(self)
            end
        elseif action.released then
            abort_jump(self)
        end
	end
end