go.property("player_id", 0)
go.property("nr_arrows",15)

local config = require "main.config"
local player_state = require "player.player_state"

-- pre-hashing ids improves performance
local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")
local msg_enable = hash("enable")
local msg_disable = hash("disable")
local msg_arrow_hit = hash("hit_by_arrow")
local msg_arrow_collect = hash("collect_arrow")

local group_level = hash("level")
local group_arrow = hash("player_arrow")

local anim_run = hash("run")
local anim_wall_glide = hash("wall_glide")
local anim_idle = hash("idle")
local anim_jump = hash("jump")
local anim_fall = hash("fall")
local anim_die = hash("die")
local anim_dash = hash("dash")



function init(self)
    msg.post(".", "acquire_input_focus")
    msg.post("/aim_"..self.player_id,msg_disable)

    self.velocity = vmath.vector3(0, 0, 0)
    self.correction = vmath.vector3()
    self.move_input = vmath.vector3()
    self.anim = nil  -- the currently playing animation

    self.flipped_sprite = false
    self.vertical_contact = 0
    self.horizontal_contact = 0
    self.state = player_state.FALLING
    self.last_state = player_state.FALLING
    self.is_aiming = false
    self.will_fire = false
    self.will_dash = false
    self.go_aim = go.get_id("/aim_"..self.player_id)
    
    self.input_up = hash("up_"..self.player_id)
	self.input_down = hash("down_"..self.player_id)
	self.input_left = hash("left_"..self.player_id)
	self.input_right = hash("right_"..self.player_id)
	self.input_jump = hash("jump_"..self.player_id)
	self.input_fire = hash("fire_"..self.player_id)
	self.input_dash = hash("dash_"..self.player_id)
	-- v_dash.x and v_dash.y holds direction 
	-- v_dash.z holds dashtime and cooldown time
	self.v_dash = vmath.vector3(0,0,0)
    
    msg.post("/hud","update",{player_id = self.player_id, nr_arrows = self.nr_arrows, name = "Player "..self.player_id})
   	player_state.set_state(self, player_state.FALLING)
end

local function play_animation(self, anim)
    if self.anim ~= anim then
        msg.post("#sprite", "play_animation", {id = anim})
        self.anim = anim
    end
end

local function flip_horizontal(self,flipped)
	if flipped ~= nil then
		self.flipped_sprite = flipped
	else 
		self.flipped_sprite = not self.flipped_sprite
	end
	sprite.set_hflip("#sprite", self.flipped_sprite)
end

local function update_animations(self)
	if self.state == player_state.DEAD then return end
	if self.state == player_state.DASHING then play_animation(self, anim_dash) return end
    if self.state == player_state.STANDING then
        if self.velocity.x == 0 then
            play_animation(self, anim_idle)
        else
            play_animation(self, anim_run)
        end
    else
        if self.velocity.y > 0 then
            play_animation(self, anim_jump)
        else
            play_animation(self, anim_fall)
        end
    end
    if self.state == player_state.WALL_GLIDING then
    	if self.horizontal_contact == 1 then
    		flip_horizontal(self,true)
    	else
    		flip_horizontal(self,false)
    	end
    	play_animation(self,anim_wall_glide)
    end
end

local function return_aim_angle(self,v_aim)
	local angle = math.atan2(v_aim.y, v_aim.x)
    if angle < 0 then angle = angle + math.pi * 2 end
    if angle == 0 and self.flipped_sprite == true then angle = math.pi end
    
    return angle;
end

local function update_aim(self)
	-- if self.is_aiming == false then return end	
	local angle = return_aim_angle(self, self.move_input)
	go.set_rotation(vmath.quat_rotation_z(angle), self.go_aim )
end

local function update_movement(self,dt)
	-- horizontal speed
    local h_speed = self.move_input.x * config.PLAYER_MAX_SPEED -- -1 or 1
    -- calculate the difference between our current speed and the target speed
    local speed_diff = h_speed - self.velocity.x
    -- the complete acceleration to integrate over this frame
    local acceleration = vmath.vector3(0, 0, 0)
    if self.state ~= player_state.DASHING then 
    	--print("acc",self.state,player_state.DASHING)
    	acceleration.y = -config.GRAVITY 
    end
    if speed_diff ~= 0 then -- if speed_diff is 0 then no changes should be done, right?
        -- set the acceleration to work in the direction of the difference
        if speed_diff < 0 then
            acceleration.x = -config.PLAYER_ACCELERATION
        else
            acceleration.x = config.PLAYER_ACCELERATION
        end
        -- decrease the acceleration when air-borne to give a slower feel
        if not self.ground_contact then
            acceleration.x = config.AIR_FRICTION * acceleration.x
        end
    end
    -- calculate the velocity change this frame (dv is short for delta-velocity)
    local dv = acceleration * dt
    -- check if dv exceeds the intended speed difference, clamp it in that case
    if math.abs(dv.x) > math.abs(speed_diff) then
        dv.x = speed_diff
    end
    -- save the current velocity for later use
    -- (self.velocity, which right now is the velocity used the previous frame)
    local v0 = self.velocity
    -- calculate the new velocity by adding the velocity change
    self.velocity = self.velocity + dv
    
    -- reduce y-speed 
    if self.state == player_state.WALL_GLIDING and self.velocity.y < 0 then
    	self.velocity.y = self.velocity.y * config.PLAYER_WALL_FRICTION
    end
    
    if self.velocity.y > config.PLAYER_MAX_FALL_SPEED then self.velocity.y = config.PLAYER_MAX_FALL_SPEED end
    
    -- calculate the translation this frame by integrating the velocity
    local dp = (v0 + self.velocity) * dt * 0.5
    -- apply it to the player character
    go.set_position(go.get_position() + dp)
end

local function update_arrows(self,add)
	self.nr_arrows = self.nr_arrows + add
	msg.post("/hud","update",{player_id = self.player_id, nr_arrows = self.nr_arrows})
end

local function fire_arrow(self)
	local angle = return_aim_angle(self, self.move_input)
	factory.create("/factories#arrow",go.get_world_position("/bow_"..self.player_id),nil,{ angle = angle, player_id = self.player_id },1)	
  	update_arrows(self,-1)
end

local function dash(self)
	if self.v_dash.z > 0 then return end -- cooldown check 
	player_state.set_state(self,player_state.DASHING)
	
	local angle = return_aim_angle(self,self.move_input)
	if angle < math.pi*0.5 then 
		particlefx.play("#fx_dash_right")
	else
		particlefx.play("#fx_dash_left")
	end
	self.v_dash.x = math.cos(angle)
	self.v_dash.y = math.sin(angle)
	self.v_dash.z = config.DASH_TIME + config.DASH_COOLDOWN 	
	self.velocity.x = self.v_dash.x * config.DASH_VELOCITY
	self.velocity.y = self.v_dash.y * config.DASH_VELOCITY * 0.5
end


function update(self, dt)
    self.v_dash.z = self.v_dash.z - dt
    if self.v_dash.z > config.DASH_COOLDOWN then
    	player_state.set_state(self, player_state.DASHING)
    elseif self.last_state == player_state.DASHING then 
    	self.velocity.x = self.velocity.x * 0.6
    	self.velocity.y = self.velocity.y * 0.6
    end
    update_aim(self)
	update_movement(self, dt)
    update_animations(self)

    if self.will_fire then fire_arrow(self) end
    if self.will_dash then dash(self) end
    
    -- reset 
    self.correction = vmath.vector3()
    self.move_input.x = 0
    self.move_input.y = 0
    self.vertical_contact = 0
    self.horizontal_contact = 0
    self.will_fire = false
    self.will_dash = false
    player_state.reset(self)
end

local function handle_obstacle_contact(self, normal, distance)
    -- project the correction vector onto the contact normal
    -- (the correction vector is the 0-vector for the first contact point)
    local proj = vmath.dot(self.correction, normal)
    -- calculate the compensation we need to make for this contact point
    local comp = (distance - proj) * normal
    -- add it to the correction vector
    self.correction = self.correction + comp
    -- apply the compensation to the player character
    go.set_position(go.get_position() + comp)
    -- check if the normal points enough up to consider the player standing on the ground
    -- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
   
    if normal.y > 0.7 then
        self.vertical_contact = 1
        player_state.set_state(self, player_state.STANDING)
    end
    if normal.y == 0 and math.abs(normal.x) == 1 then
    	self.horizontal_contact = normal.x
    	player_state.set_state(self, player_state.WALL_GLIDING)
    end
        
    -- project the velocity onto the normal
    proj = vmath.dot(self.velocity, normal)
    -- if the projection is negative, it means that some of the velocity points towards the contact point
    if proj < 0 then
        -- remove that component in that case
        self.velocity = self.velocity - proj * normal
    end
end

function on_message(self, message_id, message, sender)
	local other_url = msg.url(message.other_id)
	
    if message_id == msg_contact_point_response then
        if message.group == group_level then
            handle_obstacle_contact(self, message.normal, message.distance)
        end
    elseif message_id == msg_arrow_hit then
    	if self.state ==  player_state.DASH then
    		-- DASHED and picks up arrow
    		update_arrows(self,1)
    	else
	    	player_state.set_state(self, player_state.DEAD)
	        play_animation(self, anim_die)
	        local impact = go.get(sender, "direction")
	        self.velocity.x = self.velocity.x * 0.3 + impact.x * config.ARROW_IMPACT
	        self.velocity.y = self.velocity.y * 0.3 + impact.y * config.ARROW_IMPACT
	        local rot = vmath.quat_rotation_z(-0.8)
	        go.animate(".", "rotation", go.PLAYBACK_ONCE_FORWARD, rot, go.EASING_OUTSINE, 0.3,0)
        end
    elseif message_id == msg_arrow_collect then
    	update_arrows(self,1)
    end
end

local function jump(self)
    if self.vertical_contact == 1 then
        self.velocity.y = config.JUMP_ACCELERATION
        local rot = return_aim_angle(self, self.velocity)-math.pi*0.5
        factory.create("/factories#world_fx", go.get_position(), vmath.quat_rotation_z(rot))
        play_animation(self, anim_jump)
    end
end

local function abort_jump(self)
    if self.velocity.y > 0 then
        self.velocity.y = self.velocity.y * 0.5
    end
end

local function wall_jump(self)
	flip_horizontal(self)
	
	self.velocity.y = config.WALL_JUMP_ACCELERATION
	self.velocity.x = config.WALL_JUMP_ACCELERATION * self.horizontal_contact
	local rot = return_aim_angle(self, self.velocity)-math.pi*0.5
    factory.create("/factories#world_fx", go.get_position(), vmath.quat_rotation_z(rot))
       
end

function on_input(self, action_id, action)
	if self.state == player_state.DEAD then return end
    if action_id == self.input_left then
        self.move_input.x = -action.value
        flip_horizontal(self,true)
    elseif action_id == self.input_right then
        self.move_input.x = action.value
        flip_horizontal(self,false)
    elseif action_id == self.input_up then
        self.move_input.y = action.value
    elseif action_id == self.input_down then
        self.move_input.y = -action.value
    elseif action_id == self.input_jump then
        if action.pressed then
        	if self.state == player_state.WALL_GLIDING then
            	wall_jump(self)
            else
            	jump(self)
            end
        elseif action.released then
            abort_jump(self)
        end
	elseif action_id == self.input_dash and action.pressed then
		self.will_dash = true
	end
	if action_id == self.input_fire then
		if self.nr_arrows < 1 then return end
		if action.pressed then
			msg.post("/aim_"..self.player_id,msg_enable)
			self.is_aiming = true
		elseif action.released then
			self.will_fire = true -- fire is happening in update loop to avoid not all controls has been registered
			self.is_aiming = false
			msg.post("/aim_"..self.player_id,msg_disable)
		end
	end
end